-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.author
(
    id_author integer NOT NULL,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    bio character varying(2000) COLLATE pg_catalog."default",
    photo character varying(255) COLLATE pg_catalog."default",
    birth_date date,
    CONSTRAINT author_pkey PRIMARY KEY (id_author)
);

CREATE TABLE IF NOT EXISTS public.book
(
    id_book integer NOT NULL,
    title character varying(255) COLLATE pg_catalog."default" NOT NULL,
    price numeric(10, 2) NOT NULL,
    publication_date date,
    isbn character varying(13) COLLATE pg_catalog."default",
    description character varying(2000) COLLATE pg_catalog."default",
    cover_image character varying(255) COLLATE pg_catalog."default",
    quantity_books integer DEFAULT 0,
    id_author integer,
    id_category integer,
    CONSTRAINT book_pkey PRIMARY KEY (id_book),
    CONSTRAINT book_isbn_key UNIQUE (isbn)
);

CREATE TABLE IF NOT EXISTS public.book_trend
(
    id_book_trend integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    id_book integer,
    id_trend integer,
    CONSTRAINT book_trend_pkey PRIMARY KEY (id_book_trend)
);

CREATE TABLE IF NOT EXISTS public.cart
(
    id_cart integer NOT NULL,
    id_user integer,
    CONSTRAINT cart_pkey PRIMARY KEY (id_cart)
);

CREATE TABLE IF NOT EXISTS public.cart_item
(
    id_cart_elements integer NOT NULL,
    id_cart integer,
    id_book integer,
    quantity_goods integer,
    CONSTRAINT cart_item_pkey PRIMARY KEY (id_cart_elements)
);

CREATE TABLE IF NOT EXISTS public.category
(
    id_category integer NOT NULL,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT category_pkey PRIMARY KEY (id_category)
);

CREATE TABLE IF NOT EXISTS public.order_item
(
    id_order_item integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    id_order integer,
    id_book integer,
    quantity_goods_unique integer,
    total_price numeric(10, 2),
    CONSTRAINT order_item_pkey PRIMARY KEY (id_order_item)
);

CREATE TABLE IF NOT EXISTS public.order_status
(
    id_status integer NOT NULL,
    status character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT order_status_pkey PRIMARY KEY (id_status)
);

CREATE TABLE IF NOT EXISTS public.orderbook
(
    id_order integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    order_date date,
    total_price numeric(10, 2),
    id_user integer,
    id_status integer,
    id_payment integer,
    delivery_address character varying(255) COLLATE pg_catalog."default",
    delivery_method character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT orderbook_pkey PRIMARY KEY (id_order)
);

CREATE TABLE IF NOT EXISTS public.payment
(
    id_payment integer NOT NULL DEFAULT nextval('payment_id_payment_seq'::regclass),
    choice_payment character varying(255) COLLATE pg_catalog."default",
    payment_date timestamp without time zone,
    CONSTRAINT payment_pkey PRIMARY KEY (id_payment)
);

CREATE TABLE IF NOT EXISTS public.review
(
    id_review integer NOT NULL,
    rating integer,
    review_text character varying(2000) COLLATE pg_catalog."default",
    created_at timestamp without time zone,
    id_book integer,
    id_user integer,
    CONSTRAINT review_pkey PRIMARY KEY (id_review)
);

CREATE TABLE IF NOT EXISTS public.role
(
    id_role integer NOT NULL,
    name_role character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT role_pkey PRIMARY KEY (id_role)
);

CREATE TABLE IF NOT EXISTS public.trend
(
    id_trend integer NOT NULL,
    name character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT trend_pkey PRIMARY KEY (id_trend)
);

CREATE TABLE IF NOT EXISTS public.userwpf
(
    login character varying(25) COLLATE pg_catalog."default",
    email character varying(255) COLLATE pg_catalog."default",
    password_hash character varying(255) COLLATE pg_catalog."default",
    created_at date,
    name character varying(255) COLLATE pg_catalog."default",
    number_phone character varying(25) COLLATE pg_catalog."default",
    id_role integer,
    id_user integer NOT NULL DEFAULT nextval('userwpf_id_user_seq'::regclass),
    CONSTRAINT userwpf_pkey PRIMARY KEY (id_user),
    CONSTRAINT userwpf_email_key UNIQUE (email),
    CONSTRAINT userwpf_login_key UNIQUE (login),
    CONSTRAINT userwpf_number_phone_key UNIQUE (number_phone)
);

ALTER TABLE IF EXISTS public.book
    ADD CONSTRAINT book_id_author_fkey FOREIGN KEY (id_author)
    REFERENCES public.author (id_author) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.book
    ADD CONSTRAINT book_id_category_fkey FOREIGN KEY (id_category)
    REFERENCES public.category (id_category) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.book_trend
    ADD CONSTRAINT book_trend_id_book_fkey FOREIGN KEY (id_book)
    REFERENCES public.book (id_book) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.book_trend
    ADD CONSTRAINT book_trend_id_trend_fkey FOREIGN KEY (id_trend)
    REFERENCES public.trend (id_trend) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.cart
    ADD CONSTRAINT cart_id_user_fkey FOREIGN KEY (id_user)
    REFERENCES public.userwpf (id_user) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.cart_item
    ADD CONSTRAINT cart_item_id_book_fkey FOREIGN KEY (id_book)
    REFERENCES public.book (id_book) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.cart_item
    ADD CONSTRAINT cart_item_id_cart_fkey FOREIGN KEY (id_cart)
    REFERENCES public.cart (id_cart) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.order_item
    ADD CONSTRAINT order_item_id_book_fkey FOREIGN KEY (id_book)
    REFERENCES public.book (id_book) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.order_item
    ADD CONSTRAINT order_item_id_order_fkey FOREIGN KEY (id_order)
    REFERENCES public.orderbook (id_order) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.orderbook
    ADD CONSTRAINT orderbook_id_payment_fkey FOREIGN KEY (id_payment)
    REFERENCES public.payment (id_payment) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.orderbook
    ADD CONSTRAINT orderbook_id_status_fkey FOREIGN KEY (id_status)
    REFERENCES public.order_status (id_status) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.orderbook
    ADD CONSTRAINT orderbook_id_user_fkey FOREIGN KEY (id_user)
    REFERENCES public.userwpf (id_user) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.review
    ADD CONSTRAINT review_id_book_fkey FOREIGN KEY (id_book)
    REFERENCES public.book (id_book) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.review
    ADD CONSTRAINT review_id_user_fkey FOREIGN KEY (id_user)
    REFERENCES public.userwpf (id_user) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.userwpf
    ADD CONSTRAINT userwpf_id_role_fkey FOREIGN KEY (id_role)
    REFERENCES public.role (id_role) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;

END;